plot(iris.tree, margin=c(.25))
title(main = "Decision Tree Model of Iris Data")
text(iris.tree, use.n = TRUE)
summary(iris.tree)
boxplot(Petal.length~Species, data=iris.train)
boxplot(Petal.Length~Species, data=iris.train)
iris.test <- iris[-train.index,]
iris.tree <- rpart(Species~.,data=iris.train)
plot(iris.tree, margin=c(.25))
title(main = "Decision Tree Model of Iris Data")
text(iris.tree, use.n = TRUE)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
set.seed(777)
data("iris")
iris.test <- iris[-train.index,]
train.index <- sample(1:nrow(iris), 0.7*nrow(iris))
## select the 30% left as the testing data
iris.predictions <- predict(iris.tree, iris.test, type = "class")
iris.tree <- rpart(Species~.,data=iris.train)
iris.test <- iris[-train.index,]
iris.tree <- rpart(Species~.,data=iris.train)
iris.train <- iris[train.index,]
iris.tree <- rpart(Species~.,data=iris.train)
iris.predictions <- predict(iris.tree, iris.test, type = "class")
iris.predictions
predict(iris.tree, newdata = iris.test)
iris.predictions <- predict(iris.tree, iris.test, type = "class")
iris.comparison <- iris.test
iris.comparison$Predictions <- iris.predictions
iris.comparison[,c("Species","Predictions")]
table <- iris.comparison[,c("Species","Predictions")]
table(iris.comparison[,c("Species","Predictions")])
swirl()
swirl()
head(PM2.5)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, color="blue")
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", break=100)
hist(ppm, col="green", breaks =100)
rug(ppm)
hist(ppm, col="green")
abline(v=12)
abline(v=12, lwd=2)
abline(v=median(ppm))
abline(v=median(ppm), col="magenta")
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
table(pollution$region) <- reg
table(pollution$region) -> reg
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
barplot(pm25~region, data=pollution, col="red")
barplot(pm25 ~region, data=pollution, col="red")
barplot(pm25 ~region, data=pollution)
boxplot(pm25 ~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- pollution[region=="east"]
east <- pollution[pollution$region=="east"]
east <- pollution[pollution$region =="east",0]
east <- pollution[pollution$region =="east",]
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution,region=="west"), col="green")
hist(subset(pollution$pm25,region=="west"), col="green")
hist((subset(pollution,region=="west"))$pm25, col="green")
hist(subset(pollution,region=="west")$pm25, col="green")
pollution$pm25
with(pollution, plot(latitude, pm25))
abline(v=12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="WEst")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="easy")
plot(east$latitude, east$pm25, main="East")
rm(list = ls())
swirl()
swirl()
swirl()
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting),main="Old Faithful Geyser data")
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting),main="Old Faithful Geyser data")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
plot(speed,dist)
plot(speed,dist, data=cars)
plot(cars$speed, cars$dist)
with(cars, plot(speed,dist))
text(mean(cars$speed), max(car$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income, data=state)
xyplot(Life.Exp ~ Income | region,
| data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality)
range(airquality$Ozone, na.rm=T)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality, data=airquality)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality, xlab = "Month", ylab="Ozone (ppb)")
boxplot(Ozone~Month,airquality, xlab = "Month", ylab="Ozone (ppb)", col.axis="blue",col.lab="red")
swirl()
library(swirl)
swirl()
boxplot(Ozone~Month,airquality, xlab = "Month", ylab="Ozone (ppb)", col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Ozone and Wind in New York City")
title(main="Wind and Ozone in NYC")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- subset(airquality, month==5)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col="blue", pch=2)
points(may$Wind, may$Ozone, col="blue", pch=17)
may <- subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, not$Ozone, col="red", pch=18)
points(notmay$Wind, not$Ozone, col="red", pch=3)
points(notmay$Wind, notmay$Ozone, col="red", pch=18)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright",c(17,8),c("blue","red"),c("May","Other Months"))
legend("topright",pch=c(17,8),color=c("blue","red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind), lty=2, lwt=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow) <- c(1,2)
par(mfrow()) <- c(1,2)
par()$mfrow <- c(1,2)
mfrow(par()) <- c(1,2)
par() <- c(1,2)
?par
par(mfrow,c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main ="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main ="Ozone and Temperature")
mxtext("Ozone and Weather in New York City") = TRUE
mxtext("Ozone and Weather in New York City", outer=TRUE
mxtext("Ozone and Weather in New York City", outer=TRUE)
mtext("Ozone and Weather in New York City", outer=TRUE)
install.packages("swirl")
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
1-3/36
deck
dim(deck)
4/(13*4)
0
(3*4)/(13*4)
3/51
0
2/51
1.5*0.8
1.5*0.8/2
1.5*0.8/2
1.6*0.8/2
0.64
mypdf
integrate(mypdf, lower=0, upper=1.6)
0.32
median(mypdf)
0.64*0.5
solve(x^2=2, x)
solve(x^2==2, x)
2^1/2
2^0.5
swirl()
library(swirl)
pmannuel
swirl(0)
swirl()
swirl()
library(swirl)
pmannuel
swirl()
library(swirl)
rm(list=ls())
swirl()
swirl()
0.997*0.001
0.997*0.985
0.997*0.001*0.985
0.001*0.997
0.001*0.985
(1-0.001)*(1-0.997)
0.001*(1-0.997)
(1-0.997)*(1-.001)
(1-.001)*(1-0.001)
0.001*0.997/((1-0.001)*(1-.997))
0.001*0.997%%((1-0.001)*(1-.997))
(1-.001)*(1-0.985)
0.001*0.997/((1-0.001)*(1-.985))
0.001*0.997/((1-0.001)*(1-.985)+.997*0.001)
train <- read.csv("C:/Users/pmann/Desktop/Kaggle/train.csv")
View(train)
rm(ls=ls())
rm(list=ls())
train <- read.csv("C:/Users/pmann/Desktop/Kaggle/train.csv")
head(train)
head(train)
head(train)
train.feat <- train[,-c(9,10,11)]
head(train)
head(train.feat)
train2 <- train.feat
View(train.feat)
?subset
?with
train2.noAge <- train2[train2$Age==NA,]
head(train2.noAge)
train2.noAge <- subset(train2, train2$Age=="NA")
head(train2.noAge)
View(train2.noAge)
View(train2.noAge)
rm(list==train2.noAge)
rm(train2.noAge)
rm(train.feat)
head(train2)
train2.missage <- subset(train2, is.na(train2$Age))
head(train2.missage)
density(train$Age)
?density
library(ggplot)
library(ggplot2)
ggplot(titanic,aes(x=Survived, y=Age))
ggplot(train,aes(x=Survived, y=Age))
ggplot(titanic,aes(x=Survived, y=Age)) + geom_boxplot(aes(color=Pclass))
ggplot(train,aes(x=Survived, y=Age)) + geom_boxplot(aes(color=Pclass))
2
ggplot(train,aes(Age)) + geom_density(aes(color=Survived))
library(lattice)
densityplot(train$Age, groups=train$Survived)
dim(train2.missage)
head(train2.missage,20)
abline(v=15)
panel.abline(v=15)
?greb
??grep
densityplot(subset(train, Sex=="male")$Age, groups=train$Survived)
densityplot(subset(train, Sex=="female")$Age, groups=train$Survived)
train.children <- subset(train, Age<=13)
summary(train.children)
summary(train.children$Age)
View(train2.missage)
train2$IsChildren <- 0
head(train2)
View(train2.missage)
View(train.children)
train.master <- grep("Master.", train)
summary(train.master$Age)
?grep
train.master <- grep("Master\\.", train$Name)
summary(train.master$Age)
summary(train.master)
rm(train.master)
train.master <- grep("Master\\.", train$Name)
train.master <- train[train.master,]
View(train.master)
summary(train.master)
summary(train.master$Age)
dim(train.children)
train.mchildren <- train.master
rm(train.master)
train.miss <- grep("Miss", train$Name)
train.miss <- train[train.miss,]
train.fchildren <- train.miss[train.miss$Age<14,]
View(train.fchildren)
View(train.miss)
View(train.miss)
rm(train.fchildren)
summary(train.miss$Age)
train.fchildren <- train.miss[train.miss$Parch!=0,]
View(train.fchildren)
table(is.na(train.miss$Age))
rownames(train.children)
rm(train.children)
rm(train2, train2.missage)
train.children <- c(row.names(train.fchildren),row.names(train.mchildren))
train.children <- train(train.children)
train.children <- train[train.children,]
View(train.children)
train.children.noage <- subset(train.children, is.na(train.children$Age))
View(train.children.noage)
summary(train.children)
library(randomForest)
titanic.data <- read.csv("Datasets/titanic.csv", header=TRUE)
data("Titanic")
Titanic <- train
rm(Titanic)
titanic <- train
titanic.data$Survived <- as.factor(titanic.data$Survived)
titanic.data$Age[is.na(titanic.data$Age)] <- median(titanic.data$Age, na.rm=TRUE)
titanic.data <- titanic
rm(titanic)
titanic.data <- titanic.data[, -c(1, 4, 9, 11)]
titanic.data$Survived <- as.factor(titanic.data$Survived)
titanic.data$Age[is.na(titanic.data$Age)] <- median(titanic.data$Age, na.rm=TRUE)
set.seed(27)
titanic.train.indices <- sample(1:nrow(titanic.data), 0.7*nrow(titanic.data), replace=F)
titanic.train <- titanic.data[titanic.train.indices,]
titanic.test <- titanic.data[-titanic.train.indices,]
titanic.rf.model <- randomForest(Survived ~ ., data=titanic.train, importance=TRUE, ntree=500)
library(randomForest)
install.packages("randomForest")
library(randomForest)
titanic.rf.model <- randomForest(Survived ~ ., data=titanic.train, importance=TRUE, ntree=500)
titanic.rf.model
titanic.rf.model <- randomForest(Survived ~ ., data=titanic.train, mtry =3, importance=TRUE, ntree=500)
titanic.rf.model
varImpPlot(titanic.rf.model)
summary(train[-row.names(train.children),])
summary(train[-c(row.names(train.children)),])
row.train.chilren <- row.names(train.children)
summary(train[-c(row.train.chilren),])
train.notchildren <- train[-c(row.train.chilren),]
train.notchildren <- train[-row.train.chilren,]
densityplot(train$Age, groups=train$Survived)
titanic.rf.model <- randomForest(Survived ~ ., data=titanic.train, mtry =3, importance=TRUE, ntree=500, type="response")
titanic.rf.model <- randomForest(Survived ~ ., data=titanic.train, mtry =3, importance=TRUE, ntree=500)
titanic.rf.predictions.prob <- predict(titanic.rf.model, titanic.test, type="response")
titanic.rf.predictions.prob
sapply(train,class)
View(train.children.noage)
dim(train.fchildren)
dim(train.mchildren)
dim(train.children)
summary(train.children$Age)
clean.train <- train
View(clean.train)
View(clean.train)
clean.train$Age[row.names(train.children.noage)] <- median(train.children$Age)
clean.train$Age[row.names(train.children.noage)] <- median(train.children$Age, na.rm=T)
row.train.children.noage <- as.numeric(row.names(train.children.noage))
head(row.train.chilren)
rm(row.train.children.noage)
rm(row.train.chilren)
rm(titanic.train.indices)
rm(titanic.rf.predictions.prob)
rm(titanic.rf.model)
rm(titanic.train)
rm(titanic.data, titanic.test)
View(train.children)
View(train.children.noage)
clear.train(row.names(train.children.noage))
clean.train[row.names(train.children.noage)]
clean.train[row.names(train.children.noage),]
clean.train[row.names(train.children.noage),]$Age
clean.train[row.names(train.children.noage),]$Age <- median(train.children$Age, nar.rm=TRUE)
clean.train[row.names(train.children.noage),]$Age <- median(train.children$Age)
clean.train[row.names(train.children.noage),]
clean.train[row.names(train.children.noage),]$Age <- median(train.children$Age, na.rm=TRUE)
clean.train[row.names(train.children.noage),]
View(clean.train)
View(clean.train)
train.adult <- train[!row.names(train.children),]
train.adult <- train[row.names(train.children),]
View(train.adult)
View(train.adult)
rm(train.adult)
table(train.children<14)
table(train.children$Age<14)
table(is.na(train.children$Age))
train.children <- train.children[train.children$Age<14,]
table(train.children$Age<14)
train.children.noage <- subset(train.children, is.na(train.children$Age))
is.true(5>NULL)
train.adult <- train[rownames(train.children) %in% remove,]
train.adult <- train[!rownames(train.children) %in% remove,]
train.adult <- train[train$Age<14,]
vie(train.adult)
view(train.adult)
View(train.adult)
View(train.adult)
train.adult <- train[!train$Age<14,]
rm(train.adult)
train.adult <- subset(train, Age>13)
View(train.adult)
View(train.adult)
dim(train)
dim(train.children)
dim(train.adult)
rm(train.adult)
clean.train$IsChildren <- 0
View(clean.train)
View(clean.train)
clean.train[row.names(train.children),]$IsChildren <- 1
View(clean.train)
View(clean.train)
clean.train$IsElderly <- 0
clean.train[clean.train$Age>60,]$IsElderly <- 1
clean.train[clean.train$Age>60,]
View(clean.train)
subset(clean.train, Age>60)
train.elder <- subset(clean.train, Age>60)
clean.train[row.names(train.elder),]$IsElderly <- 1
View(clean.train)
View(clean.train)
table(clean.train$IsElderly)
nrow(train.elder)
train.adult <- subset(train, Age>13 && Age<61)
View(train.adult)
train.adult <- subset(train, Age>13)
clean.train$Age[is.na(clean.train$Age)] <- median(train.adult$Age, na.rm=TRUE)
View(clean.train)
table(is.na(clean.train$Age))
View(clean.train)
apply(is.na(clean.train), 2, any)
sapply(clean.train, class)
as.factor(Survived, data=clean.train)
with(clean.train, as.factor(Survived, Pclass))
with(clean.train, as.factor(Survived))
sapply(clean.train, class)
factor.column <- c("Survived", "Pclass", "Sex", "IsChildren", "IsElderly")
clean.train[factor.column] <- lapply(clean.train[factor.column], factor)
sapply(clean.train, class)
write.csv(clean.train)
write.csv(clean.train, file = "clean Titanic Test Data")
setwd("~/DataScienceDojo")
write.csv(clean.train, file = "clean Titanic Test Data")
sapply(clean.train, class)
as.numeric(clean.train$SibSp, clean.train$Parch)
as.numeric(clean.train$SibSp)
clean.train$SibSp <- as.numeric(clean.train$SibSp)
clean.train$Parch <- as.numeric(clean.train$Parch)
sapply(clean.train, class)
clean.train$PassengerId <- as.numeric(clean.train$PassengerId)
sapply(clean.train, class)
write.csv(clean.train, file = "clean Titanic Test Data")
sapply(clean.train, class)
write.csv(clean.train, file = "Clean Titanic Test Data")
setwd("~/DataScienceDojo")
write.csv(clean.train, file = "Clean Titanic Test Data")
write.csv(clean.train, file = "Titanic Test Data")
table(is.na(clean.train$SibSp))
table(is.na(clean.train$Parch))
is.na(clean.train$Parch)
nrow(clean.train)
clean.train <- clean.train[-c(890:904),]
clean.train
View(clean.train)
View(clean.train)
View(train)
View(train)
rm(list=ls())
